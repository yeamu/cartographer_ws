# ==============================
# 机器人配置参数
# ==============================

# 机器人的最大平移加速度，以米/秒^2为单位 (双精度型, 默认值: 0.5)
acc_lim_x: 0.2

# 机器人的最大角加速度，以弧度/秒^2为单位 (双精度型, 默认值: 0.5)
acc_lim_theta: 1.0

# 机器人的最大平移速度，以米/秒为单位 (双精度型, 默认值: 0.4)
max_vel_x: 0.3

# 机器人向后行驶时的最大绝对平移速度，以penalty_epsilon/秒为单位。参见优化参数weight_kinematics_forward_drive (双精度型, 默认值: 0.1)
max_vel_x_backwards: 0.1

# 机器人的最大角速度，以弧度/秒为单位 (双精度型, 默认值: 0.3)
max_vel_theta: 0.3

# ==============================================================
# 以下参数仅适用于车辆般的机器人:
# ==============================================================

# 车辆般机器人的最小转弯半径#（对于差分驱动机器人，将其设置为零）。 (双精度型, 默认值: 0.0)
min_turning_radius: 0.0

# 后轴与前轴之间的距离。如果cmd_angle_instead_rotvelis设置为true，则该值可能为负（仅在需要时）。 (双精度型, 默认值: 1.0)
# wheelbase: 0.163

# 通过相应的转向角度[-pi/2,pi/2]替代在命令速度消息中的旋转速度。注意，根据应用程序更改偏航速率的语义不是理想的。在这里，它只是符合stage模拟器所需的输入。ackermann_msgs中的数据类型更合适，但不受move_base支持。本地规划器不打算自己发送命令。(布尔型, 默认值: false)
# cmd_angle_instead_rotvel: false

# ===================================================================
# 以下参数仅适用于全向机器人: ROS kinetic中的新功能
# ===================================================================
# 注意，显着减少weight_kinematics_nh，以便调整对从容纵向运动和不从容横向运动的折中
# 机器人运动的最大平移速度（非全向机器人应为零！） (双精度型, 默认值: 0.0)（横移）
# max_vel_y: 0.0

# 机器人的最大横移加速度 (双精度型, 默认值: 0.5)
# acc_lim_y: 0.0

# 为优化所需的机器人足迹模型类型。不同类型有"point"、"circular"、"line"、"two_circles"和"polygon"。模型的类型在很大程度上影响所需的计算时间。
footprint_model/type: line

# 此参数仅适用于类型 "circular"。它包含圆的半径。圆的中心位于机器人的旋转轴上。(双精度型，默认值：0.2)
# footprint_model/radius: 0.2

# 此参数仅适用于类型 "line"。它包含线段的起始坐标。(双精度型数组，默认值：[-0.3, 0.0])
footprint_model/line_start: [-0.3, 0.0]

# 此参数仅适用于类型 "line"。它包含线段的结束坐标。(双精度型数组，默认值：[0.3, 0.0])
footprint_model/line_end: [0.3, 0.0]

# 此参数仅适用于类型 "two_circles"。它描述了前圆的中心沿着机器人的x轴偏移了多少。假定机器人的旋转轴位于 [0,0]。(双精度型，默认值：0.2)
# footprint_model/front_offset:

# 此参数仅适用于类型 "two_circles"。它包含前圆的半径。(双精度型，默认值：0.2)
# footprint_model/front_radius:

# 此参数仅适用于类型 "two_circles"。它描述了后圆的中心沿着机器人的负x轴偏移了多少。假定机器人的旋转轴位于 [0,0]。(双精度型，默认值：0.2)
# footprint_model/rear_offset:

# 此参数仅适用于类型 "two_circles"。它包含后圆的半径。(双精度型，默认值：0.2)
# footprint_model/rear_radius:

# 此参数仅适用于类型 "polygon"。它包含多边形顶点的列表（每个为2D坐标）。多边形始终是封闭的：不要在末尾重复第一个顶点。(双精度型数组，默认值：[[0.25,-0.05], [...], ...])
# footprint_model/vertices:

# 如果为true，则在检查轨迹可行性之前更新机器人足迹 (布尔型，默认值：false)
is_footprint_dynamic: false

# ==========================
# 目标容忍度参数
# ==========================

# 允许目标位置到达的最终欧几里德距离，以米为单位 (双精度型，默认值：0.2)
xy_goal_tolerance: 0.2

# 允许最终方向误差，以弧度为单位 (双精度型，默认值：0.2)
yaw_goal_tolerance: 0.2

# 删除目标速度约束，以便机器人可以以最大速度到达目标 (布尔型，默认值：false)
free_goal_vel: false

# =============================
# 轨迹配置参数
# =============================
# 轨迹的期望时间分辨率（轨迹没有固定到dt_ref，因为时间分辨率是优化的一部分，但如果违反dt_ref +-dt_hysteresis，则轨迹将在迭代之间调整大小）(双精度型，默认值：0.3)
dt_ref: 0.3

# 根据当前时间分辨率自动调整大小的滞后效应，通常建议dt_ref的大约10% (双精度型，默认值：0.1)
dt_hysteresis: 0.1

# 最小样本数（应始终大于2） (整数，默认值：3)
min_samples: 3

# 覆盖由全局规划器提供的局部子目标的方向（因为它们通常只提供2D路径） (布尔型，默认值：true)
global_plan_overwrite_orientation: true

# 如果为正值，将从全局规划中提取路径点（路径跟踪模式）。该值确定参考路径的分辨率（沿全局规划的每两个连续路径点之间的最小间隔，如果为负值：禁用）。参考参数 weight_viapoint 以调整强度。版本 0.4 中的新功能（双精度型，默认值：-0.1（禁用））
global_plan_viapoint_sep: -0.1

# 指定优化中考虑的全局规划子集的最大长度（累积欧几里德距离）。实际长度由本地代价地图大小和此最大限制的逻辑连接确定。将其设置为零或负值以取消此限制。(双精度型，默认值：3.0)
max_global_plan_lookahead_dist: 3.0

# 如果以大于指定值的距离更新先前目标，则重新初始化轨迹（跳过热启动）(双精度型，默认值：1.0)
force_reinit_new_goal_dist: 1.0

# 指定每个采样间隔应检查可行性的预测计划上的姿势。 (整数，默认值：4)
feasibility_check_no_poses: 4

# 发布包含完整轨迹和活动障碍物列表的规划器反馈（仅应在评估或调试时启用）。见上面的发布者列表。(布尔型，默认值：false)
publish_feedback: false

# 允许规划器在自动检测到问题（例如，不可行性）的情况下暂时缩短水平（50%）。还参见参数 shrink_horizon_min_duration。(布尔型，默认值：true)
shrink_horizon_backup: true

# 如果为true，则在本地代价地图中目标在起点后面时，底层轨迹可能以向后运动初始化（仅当机器人配备后部传感器时才推荐使用）(布尔型，默认值：false)
allow_init_with_backwards_motion: false

# 如果为true，则规划器在速度、加速度和转弯率计算中使用精确的弧长（-> 增加CPU时间），否则使用欧几里得近似。(布尔型，默认值：false)
exact_arc_length: false

# 在检测到不可行轨迹的情况下，指定减小水平的最小持续时间（参考参数 shrink_horizon_backup 以激活减小水平模式）(双精度型，默认值：10.0)
shrink_horizon_min_duration: 10.0

# =======================
# 障碍物参数
# =======================

# 与障碍物的最小期望分离距离（双精度型，默认值：0.5）
min_obstacle_dist: 0.4

# 指定是否应考虑本地代价地图的障碍物。将标记为障碍物的每个单元格都被视为点障碍物。因此，请不要选择非常小的代价地图分辨率，因为它会增加计算时间。在将来的版本中，将解决这种情况，并提供动态障碍物的其他API。(布尔型，默认值：true)
include_costmap_obstacles: true

# 限制用于规划机器人后方的占用本地代价地图障碍物（指定距离，以米为单位）。(双精度型，默认值：1.0)
costmap_obstacles_behind_robot_dist: 1.0

# 每个障碍物位置都附加到轨迹上最近的姿势，以保持距离。还可以考虑其他额外的邻居。请注意，由于在kinetic+中修改了障碍物关联策略，因此此参数可能会在将来的版本中被删除。请参阅 legacy_obstacle_association 的参数描述。(整数，默认值：30)
obstacle_poses_affected: 30

# 障碍物周围的缓冲区，带有非零惩罚成本（应大于 min_obstacle_dist 以生效）。还请参阅权重 weight_inflation。(双精度型，默认值：pre kinetic: 0.0, kinetic+: 0.6)
inflation_dist: 0.3

# 如果将此参数设置为true，则通过常速模型在优化期间预测具有非零速度的障碍物的运动（通过用户提供的话题~/obstacles或从 costmap_converter 获取）。新功能（布尔型，默认值：false）
include_dynamic_obstacles: true

# 已修改轨迹姿势与障碍物关联的策略（请参阅更改日志）。您可以通过将此参数设置为true来切换到旧/先前的策略。旧策略：对于每个障碍物，找到最近的TEB姿势；新策略：对于每个TEB姿势，仅找到“相关的”障碍物。(布尔型，默认值：false)
legacy_obstacle_association: false

# 非传统的障碍物关联策略尝试仅在优化期间将相关障碍物与分立轨迹连接起来。但在指定的距离内的所有障碍物都被强制包含（作为 min_obstacle_dist 的倍数）。例如，选择 2.0 以强制在半径为 2.0*min_obstacle_dist 的范围内考虑障碍物。[仅在参数 legacy_obstacle_association 为false时使用] (双精度型，默认值：1.5)
obstacle_association_force_inclusion_factor: 1.5

# 请参阅 obstacle_association_force_inclusion_factor，但在 min_obstacle_dist 的倍数之外，所有障碍物在优化期间都将被忽略。首先处理参数 obstacle_association_force_inclusion_factor。[仅在参数 legacy_obstacle_association 为false时使用] (双精度型，默认值：5)
obstacle_association_cutoff_factor: 5

# 下面的参数仅在需要 costmap_converter 插件时 relevant (参见教程)

# 定义插件名称，以便将代价地图单元格转换为点/线/多边形。设置为空字符串以禁用转换，以便将所有单元格视为点障碍物。 (字符串，默认值："")
costmap_converter_plugin: ""

# 如果设置为true，则代价地图转换器会在不同的线程中调用其回调队列。 (布尔型，默认值：true)
costmap_converter_spin_thread: true

# 定义代价地图转换器插件处理当前代价地图的频率（该值不应远高于代价地图更新速率）[以Hz为单位]。(双精度型，默认值：5.0)
costmap_converter_rate: 5.0

# ==========================
# 优化参数
# ==========================

# 在每个外循环迭代中调用的实际求解器迭代次数。参见参数 no_outer_iterations。(整数，默认值：5)
no_inner_iterations: 5

# 每个外循环迭代自动根据期望的时间分辨率 dt_ref 调整轨迹大小，并调用内部优化器（执行 no_inner_iterations 次）。因此，每个规划周期中的求解器迭代总数是两者值的乘积。(整数，默认值：4)
no_outer_iterations: 4

# 为硬约束近似的惩罚函数添加一个小的安全边界 (双精度型，默认值：0.1)
penalty_epsilon: 0.01

# 满足最大允许的平移速度的优化权重 (双精度型，默认值：2.0)
weight_max_vel_x: 2.0

# 满足最大允许的角速度的优化权重 (双精度型，默认值：1.0)
weight_max_vel_theta: 1.0

# 满足最大允许的平移加速度的优化权重 (双精度型，默认值：1.0)
weight_acc_lim_x: 1.0

# 满足最大允许的角加速度的优化权重 (双精度型，默认值：1.0)
weight_acc_lim_theta: 1.0

# 满足非完整运动学的优化权重（由于运动学方程构成等式约束，因此此参数必须很高，即使值为1000也不会由于与其他成本相比的“原始”成本值较小而导致矩阵条件差）。 (双精度型，默认值：1000.0)
weight_kinematics_nh: 1000.0

# 强制机器人仅选择前进方向（正的平移速度）的优化权重。较小的权重（例如1.0）仍允许向后驾驶。约1000的值几乎可以防止向后行驶（但无法保证）。 (双精度型，默认值：10.0)
weight_kinematics_forward_drive: 10.0

# 强制最小转弯半径的优化权重（仅适用于类似汽车的机器人）。 (双精度型，默认值：1.0)
weight_kinematics_turning_radius: 1.0

# 相对于过渡/执行时间收缩轨迹的优化权重 (双精度型，默认值：1.0)
weight_optimaltime: 1.0

# 保持与障碍物的最小距离的优化权重 (双精度型，默认值：50.0)
weight_obstacle: 50.0

# 最小化到途经点（或参考路径）的距离的优化权重。版本0.4中的新功能 (双精度型，默认值：1.0)
weight_viapoint: 1.0

# 膨胀惩罚的优化权重（应该很小）。 (双精度型，默认值：0.1)
weight_inflation: 0.1

# 每个外部TEB迭代中，某些特殊的权重（当前仅 weight_obstacle）都会按照这个因子多次缩放（weight_new = weight_old*factor）。与事先设置巨大的值相比，迭代地增加权重会导致基础优化问题的更好的数值条件。 (双精度型，默认值：2.0)
weight_adapt_factor: 2.0


#==========================================
#Parallel Planning in distinctive Topologies
#==========================================

# 在不同的拓扑结构中激活并行规划（需要更多的CPU资源，因为同时优化多条轨迹） (布尔型，默认值：true)
enable_homotopy_class_planning: true

# 激活多线程以便在不同的线程中规划每条轨迹 (布尔型，默认值：true)
enable_multithreading: true

# 指定考虑的不同轨迹的最大数量（限制计算工作） (整型，默认值：4)
max_number_classes: 4

# 指定新候选者相对于先前选择的轨迹必须具有多少轨迹成本才能被选择（如果 new_cost < old_cost*factor 则选择）。 (双精度型，默认值：1.0)
selection_cost_hysteresis: 1.0

# 障碍物成本项的额外缩放，仅用于选择“最佳”候选者。 (双精度型，默认值：100.0)
selection_obst_cost_scale: 100.0

# 途经点成本项的额外缩放，仅用于选择“最佳”候选者。版本0.4中的新功能 (双精度型，默认值：1.0)
selection_viapoint_cost_scale: 1.0

# 如果为真，时间成本（平方时间差的总和）将被总过渡时间（时间差的总和）替代。 (布尔型，默认值：false)
selection_alternative_time_cost: false

# 为创建路标图生成的样本数指定（整型，默认值：15）
roadmap_graph_no_samples: 15

# 在开始和目标之间的矩形区域中对随机关键点/路径点进行采样。指定该区域的宽度（米）。 (双精度型，默认值：6)
roadmap_graph_area_width: 6

# 用于区分同伦类别的内部参数（H签名）的缩放。警告：只有在观察到本地代价图中有太多障碍物的问题时，才降低此参数，请不要选择极低的值，否则无法将障碍物与彼此区分开（0.2 < value <= 1）。 (双精度型，默认值：1.0)
h_signature_prescaler: 1.0

# 如果两个H签名的差异（实部和复部的差异）都低于指定的阈值，则假定它们相等。 (双精度型，默认值：0.1)
h_signature_threshold: 0.1

# 为了考虑障碍物，指定障碍物朝向和目标朝向之间的标量积的值。 (双精度型，默认值：1.0)
obstacle_heading_threshold: 1.0

# 可视化用于探索不同轨迹的图形（在rviz中检查标记消息） (布尔型，默认值：false)
visualize_hc_graph: false

# 如果为真，则将具有不同拓扑结构的所有轨迹都附加到途经点集，否则仅将与其相同拓扑结构的初始/全局计划相同的轨迹与它们连接（对 test_optim_node 没有影响）。版本0.4中的新功能 (布尔型，默认值：true)
viapoints_all_candidates: true

# 指定在允许切换到新等价类之前必须经过的时间（秒）。 (双精度型，默认值：0.0)
switching_blocking_period: 0.0

#=========================
# 杂项参数
#=========================
# 由机器人驱动程序或模拟器提供的里程表消息的主题名称。 (字符串型，默认值："odom")
odom_topic: wheel_odom

# 全局规划框架（在静态地图的情况下，此参数通常必须更改为 "/map"） (字符串型，默认值："odom")
map_frame: odom


