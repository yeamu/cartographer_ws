# ns : global_costmap

# costmap操作的全局帧 (字符串, 默认值: "/map")
global_frame: map

# 机器人基座链接的坐标系名称 (字符串, 默认值: "base_link")
robot_base_frame: base_link

# 一个圆形机器人应远离障碍物的距离 (kobuki: 0.18)
# robot_radius: 0.20
footprint: [[0.37, 0.31], [0.37, -0.31], [-0.37, -0.31], [-0.37, 0.31]]  # 如果机器人不是圆形

# 用于obstacle_layer, 3D->voxel 2D->other
# map_type: costmap

# 容忍的变换（tf）数据的延迟，单位为秒。该参数作为系统中可能失去tf树中的链接的保障，同时仍然允许用户在系统中存在一定程度的延迟。例如，一个变换超过0.2秒的时间可能是可以接受的，但8秒的时间不是。如果由global_frame和robot_base_frame参数指定的坐标框之间的tf变换比ros::Time::now()老transform_tolerance秒，则导航堆栈将停止机器人。(双精度型, 默认值: 0.2)
transform_tolerance: 0.5

# 地图更新的频率（赫兹） (双精度型, 默认值: 2.0)
update_frequency: 2.0

# 发布显示信息的地图的频率（赫兹） (双精度型, 默认值: 1.0)
publish_frequency: 1.0

# 是否使用costmap的滚动窗口版本。如果static_map参数设置为true，则此参数必须设置为false。(布尔型, 默认值: false)
rolling_window: false
# static_map: true

# 如果为true，则每次更新都将完整的costmap发布到"~<name>/grid"。如果为false，仅将costmap的已更改部分发布到"~<name>/grid_updates"主题。(布尔型, 默认值: false)
always_send_full_costmap: false

# 插件规范的序列，每个图层一个。每个规范都是一个带有name和type字段的字典。name用于定义插件的参数命名空间。
plugins:
  - {name: static_layer,            type: "costmap_2d::StaticLayer"}
  - {name: obstacle_layer,          type: "costmap_2d::ObstacleLayer"}
  - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}

# 地图的宽度，以米为单位。(整型, 默认值: 20)
width: 20

# 地图的高度，以米为单位。(整型, 默认值: 20)
height: 20

# 地图的分辨率，以米/单元为单位。(双精度型, 默认值: 0.05)
resolution: 0.01

# 地图在全局坐标系中的x起点，以米为单位。(双精度型, 默认值: 0.0)
origin_x: 0.0

# 地图在全局坐标系中的y起点，以米为单位。(双精度型, 默认值: 0.0)
origin_y: 0.0

#############################
#
#        static_layer
#
#############################
static_layer:
# 当从地图服务器读取地图时，应将成本视为未知的值。如果costmap不跟踪未知空间，则将视为占用的这些值的成本。零值也会导致此参数未使用。(整型, 默认值: -1)
  unknown_cost_value: -1

# 从地图服务器读取地图时，将成本视为致命的阈值。(整型, 默认值: 100)
  lethal_cost_threshold: 50

# costmap订阅静态地图的主题。当您在单个节点中有多个costmap实例并且想要使用不同的静态地图时，此参数很有用。(字符串, 默认值: "map")
  map_topic: map

# 仅订阅地图主题上的第一条消息，忽略所有后续消息 (布尔型, 默认值: false)
  first_map_only: false

# 除了map_topic，还订阅map_topic + "_updates" (布尔型, 默认值: false)
  subscribe_to_updates: false

# 如果为true，地图消息中的未知值将直接翻译到图层。否则，地图消息中的未知值将被翻译为图层中的FREE_SPACE。(布尔型, 默认值: true)
  track_unknown_space: true

# 只有当静态图层不是底层时才重要。如果为true，只有将最大值写入主costmap。(布尔型, 默认值: false)
  use_maximum: false

# 如果为true，将所有地图消息值转换为NO_INFORMATION/FREE_SPACE/LETHAL_OBSTACLE (三个值)。如果为false，可能存在完整范围的中间值。(布尔型, 默认值: true)
  trinary_costmap: true

#############################
#
#        inflation_layer
#
#############################
inflation_layer:
# 地图膨胀障碍物成本值的半径，以米为单位。(双精度型, 默认值: 0.50)
  inflation_radius: 0.20

# 应用于膨胀期间成本值的缩放因子。成本函数对于距离障碍物的插入半径距离之外且距离实际障碍物小于膨胀半径距离的所有单元格都按以下方式计算：exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1)，其中 costmap_2d::INSCRIBED_INFLATED_OBSTACLE 目前为 254。注意：由于 cost_scaling_factor 与公式中的负数相乘，增加因子将减小生成的成本值。
cost_scaling_factor: 10.0

#############################
#
#      obstacle_layer
#
#############################
obstacle_layer:
  # 将插入到costmap中的任何障碍物的最大高度，单位为米。该参数应设置为略高于机器人的高度。 (双精度型，默认值：2.0)
  max_obstacle_height: 2.0
  # 默认的从机器人距离障碍物插入costmap的最大距离，单位为米。这可以在每个传感器基础上进行覆盖。(双精度型，默认值：2.5)
  obstacle_range: 3.0
  # 使用传感器数据从地图中光线跟踪障碍物的默认范围，单位为米。这可以在每个传感器基础上进行覆盖。(双精度型，默认值：3.0)
  raytrace_range: 4.0
  # 如果为false，则每个像素有两种状态之一：致命障碍或自由。如果为true，则每个像素有三种状态之一：致命障碍、自由或未知。  (布尔型，默认值：false)
  track_unknown_space: false
  # 如果为true，则机器人的足迹将清除（标记为自由）其移动的空间。  (布尔型，默认值：true)
  footprint_clearing_enabled: true
  # 由空格分隔的每个观测源名称的列表。这定义了下面定义的每个<source_name>命名空间。(字符串型，默认值："")
  observation_sources: scan
  
  scan:
    # 传感器数据输入此源的主题。默认为源的名称。  (字符串型，默认值：source_name)
    topic: scan
    # 传感器的原点帧。留空以尝试从传感器数据中读取帧。可以从sensor_msgs/LaserScan、sensor_msgs/PointCloud和sensor_msgs/PointCloud2消息中读取帧。(字符串型，默认值："")
    sensor_frame: ""
    # 保留每个传感器读数的时间长度，以秒为单位。值为0.0将仅保留最新的读数。(双精度型，默认值：0.0)
    observation_persistence: 0.0
    # 预期从传感器中以秒为单位获得读数的频率。值为0.0将允许在读数之间无限的时间。该参数用作故障安全，防止导航堆栈在传感器失败时向机器人发送命令。它应设置为比传感器实际速率稍微宽松的值。例如，如果我们期望每0.05秒从激光器获得一次扫描，我们可以将此参数设置为0.1秒，以提供宽松的缓冲区并考虑一些系统延迟。(双精度型，默认值：0.0)
    expected_update_rate: 0.0
    # 与主题关联的数据类型，目前仅支持 "PointCloud"、"PointCloud2" 和 "LaserScan"。(字符串型，默认值："LaserScan")
    data_type: LaserScan
# 是否应使用此观测来清除自由空间。 (布尔型，默认值：false)
    clearing: true
# 是否应使用此观测来标记障碍物。 (布尔型，默认值：true)
    marking: true
# 传感器读数被视为有效的最大高度，单位为米。通常设置为略高于机器人的高度。将此参数设置为大于全局 max_obstacle_height 参数的值将不起作用。将此参数设置为小于全局 max_obstacle_height 的值将过滤掉传感器上方的点。(双精度型，默认值：2.0)
    max_obstacle_height: 2.0
# 传感器读数被视为有效的最小高度。通常设置为地面高度，但可以根据传感器的噪声模型设置得更高或更低。(双精度型，默认值：0.0)
    min_obstacle_height: 0.0
# 使用传感器数据将障碍物插入costmap的最大范围，单位为米。(双精度型，默认值：2.5)
    obstacle_range: 2.5
# 使用传感器数据从地图中光线跟踪障碍物的最大范围，单位为米。(双精度型，默认值：3.0)
    raytrace_range: 3.0
# 是否允许“LaserScan”观测消息中的Inf值。Inf值将转换为激光的最大范围。  (布尔型，默认值：false)
    inf_is_valid: false
