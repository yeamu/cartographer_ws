# ns : local_costmap

# costmap操作的全局帧 (字符串, 默认值: "/map")
global_frame: map

# 机器人基座链接的坐标系名称 (字符串, 默认值: "base_link")
robot_base_frame: base_link

# 一个圆形机器人应远离障碍物的距离 (kobuki: 0.18)
# robot_radius: 0.20
footprint: [[0.37, 0.31], [0.37, -0.31], [-0.37, -0.31], [-0.37, 0.31]]  # 如果机器人不是圆形

# 用于obstacle_layer, 3D->voxel 2D->other
# map_type: costmap

# 容忍的变换（tf）数据的延迟，单位为秒。该参数作为系统中可能失去tf树中的链接的保障，同时仍然允许用户在系统中存在一定程度的延迟。例如，一个变换超过0.2秒的时间可能是可以接受的，但8秒的时间不是。如果由global_frame和robot_base_frame参数指定的坐标框之间的tf变换比ros::Time::now()老transform_tolerance秒，则导航堆栈将停止机器人。(双精度型, 默认值: 0.2)
transform_tolerance: 0.5

# 地图更新的频率（赫兹） (双精度型, 默认值: 5.0)
update_frequency: 5.0

# 发布显示信息的地图的频率（赫兹） (双精度型, 默认值: 0.0)
publish_frequency: 1.0

# 是否使用costmap的滚动窗口版本。如果static_map参数设置为true，则此参数必须设置为false。(布尔型, 默认值: false)
rolling_window: true
# static_map: false

# 如果为true，则每次更新都将完整的costmap发布到"~<name>/grid"。如果为false，仅将costmap的已更改部分发布到"~<name>/grid_updates"主题。(布尔型, 默认值: false)
always_send_full_costmap: false

# 插件规范的序列，每个图层一个。每个规范都是一个带有name和type字段的字典。name用于定义插件的参数命名空间。
plugins:
  - {name: obstacle_layer,          type: "costmap_2d::ObstacleLayer"}
  - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}

# 地图的宽度，以米为单位。(整型, 默认值: 10)
width: 5.0

# 地图的高度，以米为单位。(整型, 默认值: 10)
height: 5.0

# 地图的分辨率，以米/单元为单位。(双精度型, 默认值: 0.05)
resolution: 0.1

# 地图在全局坐标系中的x起点，以米为单位。(双精度型, 默认值: 0.0)
origin_x: 0.0

# 地图在全局坐标系中的y起点，以米为单位。(双精度型, 默认值: 0.0)
origin_y: 0.0

#############################
#
#        inflation_layer
#
#############################
inflation_layer:
# 地图膨胀障碍物成本值的半径，以米为单位。(双精度型, 默认值: 0.55)
  inflation_radius: 0.20

# 在膨胀期间应用于成本值的缩放因子。成本函数如下计算，对于所有距离实际障碍物的插入半径之外但离充气半径距离更近的costmap单元：exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1)，其中costmap_2d::INSCRIBED_INFLATED_OBSTACLE目前为254。注意：由于cost_scaling_factor在
# 用于在膨胀过程中应用于成本值的缩放因子。成本函数如下计算，对于距实际障碍物的边界距离超过内接半径距离且距膨胀半径距离较近的成本图中的所有单元格：exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1)，其中 costmap_2d::INSCRIBED_INFLATED_OBSTACLE 当前为 254。注意：由于 cost_scaling_factor 在公式中与负数相乘，增加该因子将减小结果成本值。 (双精度型，默认值：10.0)
  cost_scaling_factor: 10.0

#############################
#
#      obstacle_layer
#
#############################
obstacle_layer:
# 插入成本图中的障碍物的最大高度，以米为单位。此参数应设置为略高于机器人的高度。 (双精度型，默认值：2.0)
  max_obstacle_height: 2.0
# 障碍物将插入成本图中的默认最大距离，以米为单位。这可以在每个传感器上进行覆盖。 (双精度型，默认值：2.5)
  obstacle_range: 2.5
# 从地图上用传感器数据光线跟踪障碍物的默认范围，以米为单位。这可以在每个传感器上进行覆盖。 (双精度型，默认值：3.0)
  raytrace_range: 3.0
# 如果为false，每个像素只有2个状态：致命障碍或自由。如果为true，每个像素有3个状态：致命障碍，自由或未知。 (布尔型，默认值：false)
  track_unknown_space: false
# 如果为true，机器人足迹将清除（标记为自由）其行进的空间。 (布尔型，默认值：true)
  footprint_clearing_enabled: true
# 由空格分隔的观测源名称列表。这定义了下面每个<source_name>命名空间的内容。 (字符串型，默认值："")
  observation_sources: scan
  
  scan:
# 此源的传感器数据输入的主题。默认为源的名称。 (字符串型，默认值：source_name)
    topic: scan
# 传感器原点的框架。留空以尝试从传感器数据中读取框架。该框架可以从sensor_msgs/LaserScan、sensor_msgs/PointCloud和sensor_msgs/PointCloud2消息中读取。 (字符串型，默认值："")
    sensor_frame: ""
# 每个传感器读数保持的时间，以秒为单位。值为0.0将只保留最新的读数。 (双精度型，默认值：0.0)
    observation_persistence: 0.0
# 从传感器中期望的读数频率，以秒为单位。值为0.0将允许在读数之间有无限的时间。此参数用作容错，以防导航栈在传感器失败时命令机器人。它应设置为略大于传感器的实际速率的值。例如，如果我们希望从激光器中每隔0.05秒获得一次扫描，我们可能会将此参数设置为0.1秒，以提供宽松的缓冲区并考虑一定量的系统延迟。 (双精度型，默认值：0.0)
    expected_update_rate: 0.0
# 与主题关联的数据类型，现在只支持 "PointCloud"、"PointCloud2" 和 "LaserScan"。 (字符串型，默认值："LaserScan")
    data_type: LaserScan
# 是否应使用此观测来清除自由空间。 (布尔型，默认值：false)
    clearing: true
# 是否应使用此观测来标记障碍物。 (布尔型，默认值：true)
    marking: true
# 传感器读数被视为有效的最大高度，以米为单位。通常设置为略高于机器人的高度。将此参数设置为大于全局 max_obstacle_height 参数的值将不起作用。将此参数设置为小于全局 max_obstacle_height 的值将过滤掉此传感器上方的点。 (双精度型，默认值：2.0)
    max_obstacle_height: 2.0
# 传感器读数被视为有效的最小高度，以米为单位。通常设置为地面高度，但可以根据传感器的噪声模型设置得更高或更低。 (双精度型，默认值：0.0)
    min_obstacle_height: 0.0
# 将障碍物插入成本图的最大范围，以米为单位，使用传感器数据。  (双精度型，默认值：2.5)
    obstacle_range: 2.5
# 使用传感器数据从地图中光线跟踪障碍物的最大范围，以米为单位。  (双精度型，默认值：3.0)
    raytrace_range: .03
# 允许 "LaserScan" 观测消息中的 Inf 值。将 Inf 值转换为激光的最大范围。  (布尔型，默认值：false)
    inf_is_valid: false
